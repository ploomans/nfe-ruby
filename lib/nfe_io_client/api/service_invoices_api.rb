=begin
#Service Invoice API (api.nfe.io)

#No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module NfeClient
  class ServiceInvoicesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Cancelar uma Nota Fiscal de Serviços (NFSE)
    # Você precisará do APIKEY da Empresa
    # @param company_id ID da empresa
    # @param id ID da Nota Fiscal de Serviço (NFSE)
    # @param [Hash] opts the optional parameters
    # @return [String]
    def cancel_service_invoice(company_id, id, opts = {})
      data, _status_code, _headers = cancel_service_invoice_with_http_info(company_id, id, opts)
      return data
    end

    # Cancelar uma Nota Fiscal de Serviços (NFSE)
    # Você precisará do APIKEY da Empresa
    # @param company_id ID da empresa
    # @param id ID da Nota Fiscal de Serviço (NFSE)
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def cancel_service_invoice_with_http_info(company_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ServiceInvoicesApi.cancel_service_invoice ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling ServiceInvoicesApi.cancel_service_invoice" if company_id.nil?
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ServiceInvoicesApi.cancel_service_invoice" if id.nil?
      # resource path
      local_var_path = "/v1/companies/{company_id}/serviceinvoices/{id}".sub('{format}','json').sub('{' + 'company_id' + '}', company_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'text/json', 'application/bson', 'text/xml']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceInvoicesApi#cancel_service_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Emitir uma Nota Fiscal de Serviço (NFSE)
    # Você precisará do APIKEY da Empresa
    # @param company_id ID da empresa
    # @param item Dados da nota fiscal de serviço
    # @param [Hash] opts the optional parameters
    # @return [ServiceInvoiceResource]
    def create_service_invoice(company_id, item, opts = {})
      data, _status_code, _headers = create_service_invoice_with_http_info(company_id, item, opts)
      return data
    end

    # Emitir uma Nota Fiscal de Serviço (NFSE)
    # Você precisará do APIKEY da Empresa
    # @param company_id ID da empresa
    # @param item Dados da nota fiscal de serviço
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceInvoiceResource, Fixnum, Hash)>] ServiceInvoiceResource data, response status code and response headers
    def create_service_invoice_with_http_info(company_id, item, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ServiceInvoicesApi.create_service_invoice ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling ServiceInvoicesApi.create_service_invoice" if company_id.nil?
      # verify the required parameter 'item' is set
      fail ArgumentError, "Missing the required parameter 'item' when calling ServiceInvoicesApi.create_service_invoice" if item.nil?
      # resource path
      local_var_path = "/v1/companies/{company_id}/serviceinvoices".sub('{format}','json').sub('{' + 'company_id' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'text/json', 'application/bson']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'text/json', 'application/bson', 'text/xml', 'application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(item)
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInvoiceResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceInvoicesApi#create_service_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download do PDF da Nota Fiscal de Serviço (NFSE)
    # Você precisará do APIKEY da Empresa
    # @param company_id ID da empresa
    # @param id ID da Nota Fiscal de Serviço (NFSE)
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_pdf_version_of_service_invoice(company_id, id, opts = {})
      data, _status_code, _headers = get_pdf_version_of_service_invoice_with_http_info(company_id, id, opts)
      return data
    end

    # Download do PDF da Nota Fiscal de Serviço (NFSE)
    # Você precisará do APIKEY da Empresa
    # @param company_id ID da empresa
    # @param id ID da Nota Fiscal de Serviço (NFSE)
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_pdf_version_of_service_invoice_with_http_info(company_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ServiceInvoicesApi.get_pdf_version_of_service_invoice ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling ServiceInvoicesApi.get_pdf_version_of_service_invoice" if company_id.nil?
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ServiceInvoicesApi.get_pdf_version_of_service_invoice" if id.nil?
      # resource path
      local_var_path = "/v1/companies/{company_id}/serviceinvoices/{id}/pdf".sub('{format}','json').sub('{' + 'company_id' + '}', company_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'text/json', 'application/bson', 'text/xml']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceInvoicesApi#get_pdf_version_of_service_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Obter os detalhes de uma Nota Fiscal de Serviço (NFSE)
    # Você precisará do API Key da Empresa
    # @param company_id ID da empresa
    # @param id ID da Nota Fiscal de Serviço (NFSE)
    # @param [Hash] opts the optional parameters
    # @return [ServiceInvoiceResource]
    def get_service_invoice(company_id, id, opts = {})
      data, _status_code, _headers = get_service_invoice_with_http_info(company_id, id, opts)
      return data
    end

    # Obter os detalhes de uma Nota Fiscal de Serviço (NFSE)
    # Você precisará do API Key da Empresa
    # @param company_id ID da empresa
    # @param id ID da Nota Fiscal de Serviço (NFSE)
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceInvoiceResource, Fixnum, Hash)>] ServiceInvoiceResource data, response status code and response headers
    def get_service_invoice_with_http_info(company_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ServiceInvoicesApi.get_service_invoice ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling ServiceInvoicesApi.get_service_invoice" if company_id.nil?
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ServiceInvoicesApi.get_service_invoice" if id.nil?
      # resource path
      local_var_path = "/v1/companies/{company_id}/serviceinvoices/{id}".sub('{format}','json').sub('{' + 'company_id' + '}', company_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'text/json', 'application/bson']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInvoiceResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceInvoicesApi#get_service_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Listar as Notas Fiscais de Serviço (NFSE)
    # Você precisará do APIKEY da Empresa
    # @param company_id ID da empresa
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_count Items por página
    # @option opts [Integer] :page_index Número da página
    # @return [ServiceInvoiceCollectionResource]
    def get_service_invoices(company_id, opts = {})
      data, _status_code, _headers = get_service_invoices_with_http_info(company_id, opts)
      return data
    end

    # Listar as Notas Fiscais de Serviço (NFSE)
    # Você precisará do APIKEY da Empresa
    # @param company_id ID da empresa
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_count Items por página
    # @option opts [Integer] :page_index Número da página
    # @return [Array<(ServiceInvoiceCollectionResource, Fixnum, Hash)>] ServiceInvoiceCollectionResource data, response status code and response headers
    def get_service_invoices_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ServiceInvoicesApi.get_service_invoices ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling ServiceInvoicesApi.get_service_invoices" if company_id.nil?
      # resource path
      local_var_path = "/v1/companies/{company_id}/serviceinvoices".sub('{format}','json').sub('{' + 'company_id' + '}', company_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'pageCount'] = opts[:'page_count'] if !opts[:'page_count'].nil?
      query_params[:'pageIndex'] = opts[:'page_index'] if !opts[:'page_index'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'text/json', 'application/bson']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInvoiceCollectionResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceInvoicesApi#get_service_invoices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download do XML da Nota Fiscal de Serviço (NFSE)
    # Você precisará do APIKEY da Empresa
    # @param company_id ID da empresa
    # @param id ID da Nota Fiscal de Serviço (NFSE)
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_xml_version_of_service_invoice(company_id, id, opts = {})
      data, _status_code, _headers = get_xml_version_of_service_invoice_with_http_info(company_id, id, opts)
      return data
    end

    # Download do XML da Nota Fiscal de Serviço (NFSE)
    # Você precisará do APIKEY da Empresa
    # @param company_id ID da empresa
    # @param id ID da Nota Fiscal de Serviço (NFSE)
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_xml_version_of_service_invoice_with_http_info(company_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ServiceInvoicesApi.get_xml_version_of_service_invoice ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling ServiceInvoicesApi.get_xml_version_of_service_invoice" if company_id.nil?
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ServiceInvoicesApi.get_xml_version_of_service_invoice" if id.nil?
      # resource path
      local_var_path = "/v1/companies/{company_id}/serviceinvoices/{id}/xml".sub('{format}','json').sub('{' + 'company_id' + '}', company_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'text/json', 'application/bson', 'text/xml']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceInvoicesApi#get_xml_version_of_service_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consulta Notas Fiscais de Serviço (NFSE) da Prefeitura
    # Você precisará do APIKEY da Empresa
    # @param company_id ID da empresa
    # @param date_range 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def pull_all_service_invoices_from_prefeitura(company_id, date_range, opts = {})
      data, _status_code, _headers = pull_all_service_invoices_from_prefeitura_with_http_info(company_id, date_range, opts)
      return data
    end

    # Consulta Notas Fiscais de Serviço (NFSE) da Prefeitura
    # Você precisará do APIKEY da Empresa
    # @param company_id ID da empresa
    # @param date_range 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def pull_all_service_invoices_from_prefeitura_with_http_info(company_id, date_range, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ServiceInvoicesApi.pull_all_service_invoices_from_prefeitura ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling ServiceInvoicesApi.pull_all_service_invoices_from_prefeitura" if company_id.nil?
      # verify the required parameter 'date_range' is set
      fail ArgumentError, "Missing the required parameter 'date_range' when calling ServiceInvoicesApi.pull_all_service_invoices_from_prefeitura" if date_range.nil?
      # resource path
      local_var_path = "/v1/companies/{company_id}/serviceinvoices/pull".sub('{format}','json').sub('{' + 'company_id' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'text/json', 'application/bson', 'text/xml']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'text/json', 'application/bson', 'text/xml', 'application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(date_range)
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceInvoicesApi#pull_all_service_invoices_from_prefeitura\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enviar email para o Tomador com a Nota Fiscal de Serviço (NFSE)
    # Você precisará do APIKEY da Empresa
    # @param company_id ID da empresa
    # @param id ID da Nota Fiscal de Serviço (NFSE)
    # @param [Hash] opts the optional parameters
    # @return [String]
    def send_service_invoice_by_email(company_id, id, opts = {})
      data, _status_code, _headers = send_service_invoice_by_email_with_http_info(company_id, id, opts)
      return data
    end

    # Enviar email para o Tomador com a Nota Fiscal de Serviço (NFSE)
    # Você precisará do APIKEY da Empresa
    # @param company_id ID da empresa
    # @param id ID da Nota Fiscal de Serviço (NFSE)
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def send_service_invoice_by_email_with_http_info(company_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ServiceInvoicesApi.send_service_invoice_by_email ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling ServiceInvoicesApi.send_service_invoice_by_email" if company_id.nil?
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ServiceInvoicesApi.send_service_invoice_by_email" if id.nil?
      # resource path
      local_var_path = "/v1/companies/{company_id}/serviceinvoices/{id}/sendemail".sub('{format}','json').sub('{' + 'company_id' + '}', company_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'text/json', 'application/bson', 'text/xml']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceInvoicesApi#send_service_invoice_by_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

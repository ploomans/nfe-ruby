=begin
#Service Invoice API (api.nfe.io)

#No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module NfeClient
  class CompaniesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Criar uma empresa
    # 
    # @param item Dados da empresa
    # @param [Hash] opts the optional parameters
    # @return [CompanySingleResource]
    def create_company(item, opts = {})
      data, _status_code, _headers = create_company_with_http_info(item, opts)
      return data
    end

    # Criar uma empresa
    # 
    # @param item Dados da empresa
    # @param [Hash] opts the optional parameters
    # @return [Array<(CompanySingleResource, Fixnum, Hash)>] CompanySingleResource data, response status code and response headers
    def create_company_with_http_info(item, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompaniesApi.create_company ..."
      end
      # verify the required parameter 'item' is set
      fail ArgumentError, "Missing the required parameter 'item' when calling CompaniesApi.create_company" if item.nil?
      # resource path
      local_var_path = "/v1/companies".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'text/json', 'application/bson', 'text/xml']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'text/json', 'application/bson', 'text/xml', 'application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(item)
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CompanySingleResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompaniesApi#create_company\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Excluir uma empresa
    # 
    # @param company_id ID da empresa
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_company(company_id, opts = {})
      data, _status_code, _headers = delete_company_with_http_info(company_id, opts)
      return data
    end

    # Excluir uma empresa
    # 
    # @param company_id ID da empresa
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def delete_company_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompaniesApi.delete_company ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompaniesApi.delete_company" if company_id.nil?
      # resource path
      local_var_path = "/v1/companies/{company_id}".sub('{format}','json').sub('{' + 'company_id' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'text/json', 'application/bson', 'text/xml']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompaniesApi#delete_company\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Listar as empresas ativas de uma conta
    # 
    # @param [Hash] opts the optional parameters
    # @return [CompanyCollectionResource]
    def get_companies(opts = {})
      data, _status_code, _headers = get_companies_with_http_info(opts)
      return data
    end

    # Listar as empresas ativas de uma conta
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CompanyCollectionResource, Fixnum, Hash)>] CompanyCollectionResource data, response status code and response headers
    def get_companies_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompaniesApi.get_companies ..."
      end
      # resource path
      local_var_path = "/v1/companies".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'text/json', 'application/bson', 'text/xml']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CompanyCollectionResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompaniesApi#get_companies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Obter os detalhes de uma empresa
    # 
    # @param company_id_or_tax_number ID da empresa ou Inscrição Federal (CNPJ)
    # @param [Hash] opts the optional parameters
    # @return [CompanySingleResource]
    def get_company(company_id_or_tax_number, opts = {})
      data, _status_code, _headers = get_company_with_http_info(company_id_or_tax_number, opts)
      return data
    end

    # Obter os detalhes de uma empresa
    # 
    # @param company_id_or_tax_number ID da empresa ou Inscrição Federal (CNPJ)
    # @param [Hash] opts the optional parameters
    # @return [Array<(CompanySingleResource, Fixnum, Hash)>] CompanySingleResource data, response status code and response headers
    def get_company_with_http_info(company_id_or_tax_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompaniesApi.get_company ..."
      end
      # verify the required parameter 'company_id_or_tax_number' is set
      fail ArgumentError, "Missing the required parameter 'company_id_or_tax_number' when calling CompaniesApi.get_company" if company_id_or_tax_number.nil?
      # resource path
      local_var_path = "/v1/companies/{company_id_or_tax_number}".sub('{format}','json').sub('{' + 'company_id_or_tax_number' + '}', company_id_or_tax_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'text/json', 'application/bson', 'text/xml']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CompanySingleResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompaniesApi#get_company\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Atualizar uma empresa
    # 
    # @param company_id ID da empresa
    # @param item Dados da empresa
    # @param [Hash] opts the optional parameters
    # @return [CompanySingleResource]
    def update_company(company_id, item, opts = {})
      data, _status_code, _headers = update_company_with_http_info(company_id, item, opts)
      return data
    end

    # Atualizar uma empresa
    # 
    # @param company_id ID da empresa
    # @param item Dados da empresa
    # @param [Hash] opts the optional parameters
    # @return [Array<(CompanySingleResource, Fixnum, Hash)>] CompanySingleResource data, response status code and response headers
    def update_company_with_http_info(company_id, item, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompaniesApi.update_company ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompaniesApi.update_company" if company_id.nil?
      # verify the required parameter 'item' is set
      fail ArgumentError, "Missing the required parameter 'item' when calling CompaniesApi.update_company" if item.nil?
      # resource path
      local_var_path = "/v1/companies/{company_id}".sub('{format}','json').sub('{' + 'company_id' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'text/json', 'application/bson', 'text/xml']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'text/json', 'application/bson', 'text/xml', 'application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(item)
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CompanySingleResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompaniesApi#update_company\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload do certificado digital da empresa usando o codificação multipart/form-data.
    # 
    # @param company_id ID da empresa
    # @param file Arquivo do certificado digital com extensao PFX ou P12
    # @param password Senha do arquivo do certificado digital
    # @param [Hash] opts the optional parameters
    # @return [String]
    def upload_company_certificate(company_id, file, password, opts = {})
      data, _status_code, _headers = upload_company_certificate_with_http_info(company_id, file, password, opts)
      return data
    end

    # Upload do certificado digital da empresa usando o codificação multipart/form-data.
    # 
    # @param company_id ID da empresa
    # @param file Arquivo do certificado digital com extensao PFX ou P12
    # @param password Senha do arquivo do certificado digital
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def upload_company_certificate_with_http_info(company_id, file, password, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompaniesApi.upload_company_certificate ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompaniesApi.upload_company_certificate" if company_id.nil?
      # verify the required parameter 'file' is set
      fail ArgumentError, "Missing the required parameter 'file' when calling CompaniesApi.upload_company_certificate" if file.nil?
      # verify the required parameter 'password' is set
      fail ArgumentError, "Missing the required parameter 'password' when calling CompaniesApi.upload_company_certificate" if password.nil?
      # resource path
      local_var_path = "/v1/companies/{company_id}/certificate".sub('{format}','json').sub('{' + 'company_id' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'text/json', 'application/bson', 'text/xml']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['multipart/form-data']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["file"] = file
      form_params["password"] = password

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompaniesApi#upload_company_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
